import bot from '../services/telegramService.js';
import { Room } from '../models/Room.js';
import { User } from '../models/User.js';
import { ArchivedRoom } from '../models/ArchivedRoom.js';

export const sendBidMessage = async (req, res) => {
  try {
    const { id } = req.body;
    if (!id) {
      return res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω Telegram ID' });
    }

    const pad = (num, width = 5) => {
      const s = String(num);
      return s.length >= width ? s : s + ' '.repeat(width - s.length);
    };
    const bar = (pct) => {
      const total = 10;
      const filled = Math.round((Number(pct) / 100) * total);
      const empty = Math.max(0, total - filled);
      return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
    };

    // 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId
    const user = await User.findOne({ telegramId: id });
    if (!user) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ' });
    }

    // 2) –ò—â–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –∞—Ä—Ö–∏–≤–µ, –≥–¥–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤–æ–≤–∞–ª
    const archivedRoom = await ArchivedRoom.findOne({ 'answers.id': String(id) });

    // 3) –ì–æ—Ç–æ–≤–∏–º –∏–º—è –∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const participantFromArchive = archivedRoom?.answers?.find(a => String(a.id) === String(id));
    const rawName = ([user.firstName, user.lastName].filter(Boolean).join(' ') || user.name || '–ë–µ–∑ –∏–º–µ–Ω–∏');
    const safeName = String(rawName).trim().replace(/\s+/g, ' ');
    const userLink = user.username
      ? `<a href="https://t.me/${user.username}">${safeName}</a>`
      : `<a href="tg://user?id=${id}">${safeName}</a>`;

    // 4) –®–∞–ø–∫–∞ –∑–∞—è–≤–∫–∏ (–µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å, –∫–∞–∫ —É –∏—Ç–æ–≥–æ–≤)
    let message = `<b>üìä –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–±–æ—Ä –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞</b>\n\n`;
    const nickLabel = user.username ? `@${user.username}` : '(–±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞)';
    message += `üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> ${nickLabel} ‚Äî <b>${safeName}</b>\n`;
    const roomId = archivedRoom?.roomId ?? '‚Äî';
    const membersCount = Array.isArray(archivedRoom?.members) ? archivedRoom.members.length : '‚Äî';
    message += `<b>–ö–æ–º–Ω–∞—Ç–∞:</b> ${roomId}\n`;
    message += `<b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> ${membersCount}\n\n`;

    // 5) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ ‚Äî –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç—ã/–æ—Ü–µ–Ω–∫–∏
    if (archivedRoom && participantFromArchive) {
      // üß† –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫)
      if (Array.isArray(participantFromArchive.questions_answers) && participantFromArchive.questions_answers.length) {
        message += `<b>üß† –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b>\n`;
        participantFromArchive.questions_answers.forEach((ans, i) => {
          const t = String(ans ?? '').trim().replace(/\s+/g, ' ');
          message += `${i + 1}. ${t}\n`;
        });
        message += `\n`;
      }

      // üìà –ò—Ç–æ–≥–æ–≤—ã–µ –¥–æ–ª–∏ (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤–µ)
      if (archivedRoom?.result?.capitals && archivedRoom?.members?.length) {
        message += `<b>–°—Ä–µ–¥–Ω–∏–µ –¥–æ–ª–∏ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∞–º</b>\n`;
        for (const m of archivedRoom.members) {
          const caps = archivedRoom.result.capitals[m] || { econ: 0, human: 0, social: 0 };
          message += `‚Ä¢ ${m}\n`;
          message += `<code>–≠–∫–æ–Ω ${pad((caps.econ ?? 0).toFixed(1))} %  ${bar(caps.econ)}</code>\n`;
          message += `<code>–ß–µ–ª  ${pad((caps.human ?? 0).toFixed(1))} %  ${bar(caps.human)}</code>\n`;
          message += `<code>–°–æ—Ü  ${pad((caps.social ?? 0).toFixed(1))} %  ${bar(caps.social)}</code>\n\n`;
        }
      }

      if (archivedRoom?.result?.shares?.length) {
        message += `<b>–ò—Ç–æ–≥–æ–≤—ã–µ –¥–æ–ª–∏</b>\n`;
        for (const s of archivedRoom.result.shares) {
          const nm = String(s.name ?? '').trim().replace(/\s+/g, ' ');
          message += `‚Ä¢ ${nm}: <b>${s.share}%</b>\n`;
        }
      } else {
        // –ê—Ä—Ö–∏–≤ –µ—Å—Ç—å, –Ω–æ —Ä–∞—Å—á—ë—Ç–∞ –Ω–µ—Ç
        message += `<i>–¢–µ—Å—Ç –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª.</i>\n\n`;
      }
    } else {
      // –ù–µ—Ç –∞—Ä—Ö–∏–≤–∞ ‚Äî —Ç–∞ –∂–µ —Ñ–æ—Ä–º–∞, –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      message += `<i>–¢–µ—Å—Ç –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª.</i>\n\n`;
    }

    const GROUP_CHAT_ID = process.env.GROUP_CHAT_ID;
    const profileUrl = user.username ? `https://t.me/${user.username}` : `tg://user?id=${id}`;
    const replyMarkup = { inline_keyboard: [[{ text: 'üë§ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', url: profileUrl }]] };
    await bot.sendMessage(GROUP_CHAT_ID, message, { parse_mode: 'HTML', disable_web_page_preview: true, reply_markup: replyMarkup });

    return res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–∑–±–æ—Ä:', error);
    return res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};