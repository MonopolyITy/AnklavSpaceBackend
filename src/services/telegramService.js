// bot.js
import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';
import { User } from '../models/User.js';
import { Room } from '../models/Room.js';

dotenv.config();

export const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

const originalSendMessage = bot.sendMessage.bind(bot);
bot.sendMessage = async (...args) => {
  try {
    return await originalSendMessage(...args);
  } catch (err) {
    const status = err.response?.statusCode;
    if (status === 400 || status === 403) {
      console.warn(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${status})`);
      return null;
    }
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
    return null;
  }
};

const replyMarkup = {
  inline_keyboard: [
    [{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: 'https://anklavspace.netlify.app/' } }]
  ]
};

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const from = msg.from;

  try {
    let user = await User.findOne({ telegramId: from.id });

    if (!user) {
      // –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
      user = new User({
        telegramId: from.id,
        username: from.username || '',
        firstName: from.first_name || '',
        lastName: from.last_name || '',
        languageCode: from.language_code || '',
        createdAt: new Date()
      });
      await user.save();
    }

    await bot.sendMessage(
      chatId,
      `üëã –ü—Ä–∏–≤–µ—Ç, ${from.first_name || '–¥—Ä—É–≥'}!`,
      { reply_markup: replyMarkup }
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
  }
});

export default bot;

// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–Ω–∞—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –≤–µ—Å–∞–º–∏)
// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const CAPS = ['econ', 'human', 'social'];

function computeRoomResult(room) {
  const members = room.members;
  const R = room.answers.length;

  // 1) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–≤–µ—Ç—ã –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–ø–∏—Ç–∞–ª—É —Å—É–º–º–∞ –ø–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º –±—ã–ª–∞ 100
  const perRespondentNormalized = room.answers.map(ans => {
    const vec = {};
    members.forEach(m => (vec[m] = { econ: 0, human: 0, social: 0 }));

    // —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    if (vec[ans.name]) {
      CAPS.forEach(k => {
        vec[ans.name][k] += Number(ans.self_input?.[k] || 0);
      });
    }
    // –æ—Ü–µ–Ω–∫–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
    for (const p of ans.partners_input || []) {
      if (!vec[p.partnerName]) continue;
      CAPS.forEach(k => {
        vec[p.partnerName][k] += Number(p?.[k] || 0);
      });
    }

    // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–ø–∏—Ç–∞–ª—É –Ω–∞ 100
    const norm = {};
    members.forEach(m => (norm[m] = { econ: 0, human: 0, social: 0 }));
    CAPS.forEach(k => {
      const sumK = members.reduce((s, m) => s + (vec[m][k] || 0), 0);
      if (sumK > 0) {
        members.forEach(m => {
          norm[m][k] = (vec[m][k] / sumK) * 100;
        });
      } else {
        // –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî —Ä–∞–≤–Ω—ã–µ –¥–æ–ª–∏
        members.forEach(m => {
          norm[m][k] = 100 / members.length;
        });
      }
    });
    return norm;
  });

  // 2) –£—Å—Ä–µ–¥–Ω—è–µ–º –ø–æ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞–º
  const avg = {};
  members.forEach(m => (avg[m] = { econ: 0, human: 0, social: 0 }));
  perRespondentNormalized.forEach(norm => {
    members.forEach(m => {
      CAPS.forEach(k => {
        avg[m][k] += norm[m][k] / R;
      });
    });
  });

  // 3) –í–µ—Å—ã –∫–∞–ø–∏—Ç–∞–ª–æ–≤ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ —Ä–∞–≤–Ω—ã–µ)
  const w = room.weights && CAPS.every(k => typeof room.weights[k] === 'number')
    ? room.weights
    : { econ: 33.3333, human: 33.3333, social: 33.3334 };

  // 4) –°—á–∏—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–æ–ª–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ Share(i) = (1/100) * Œ£_k [ w^k √ó p^k(i) ]
  let raw = members.map(name => ({
    name,
    share: CAPS.reduce((s, k) => s + (w[k] / 100) * avg[name][k], 0)
  }));

  // 5) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞ 100 –∏–∑-–∑–∞ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –∏ –∫—Ä–∞—Å–∏–≤–æ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ 0.1% —Å –º–µ—Ç–æ–¥–æ–º –Ω–∞–∏–±–æ–ª—å—à–∏—Ö –æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö
  const totalRaw = raw.reduce((s, x) => s + x.share, 0) || 1;
  raw.forEach(x => (x.share = (x.share / totalRaw) * 100));

  let rounded = raw.map(x => {
    const unrounded = x.share;
    const r = Math.round(unrounded * 10) / 10;
    return { name: x.name, share: r, remainder: unrounded * 10 - Math.floor(unrounded * 10) };
  });
  let sumRounded = rounded.reduce((s, x) => s + x.share, 0);
  sumRounded = Math.round(sumRounded * 10) / 10;
  let delta = Number((100 - sumRounded).toFixed(1));
  while (Math.abs(delta) >= 0.1 - 1e-9) {
    if (delta > 0) {
      // –¥–æ–±–∞–≤–∏—Ç—å 0.1 —Ç–µ–º, —É –∫–æ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫ –±–æ–ª—å—à–µ
      let idx = 0;
      for (let i = 1; i < rounded.length; i++) {
        if (rounded[i].remainder > rounded[idx].remainder) idx = i;
      }
      rounded[idx].share = Number((rounded[idx].share + 0.1).toFixed(1));
      rounded[idx].remainder = 0;
      delta = Number((delta - 0.1).toFixed(1));
    } else {
      // —Å–Ω—è—Ç—å 0.1 —É —Ç–µ—Ö, —É –∫–æ–≥–æ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ
      let idx = 0;
      for (let i = 1; i < rounded.length; i++) {
        if (rounded[i].remainder < rounded[idx].remainder) idx = i;
      }
      rounded[idx].share = Number((rounded[idx].share - 0.1).toFixed(1));
      rounded[idx].remainder = 1;
      delta = Number((delta + 0.1).toFixed(1));
    }
  }

  const finalCaps = {};
  members.forEach(m => {
    finalCaps[m] = {
      econ: Number(avg[m].econ.toFixed(1)),
      human: Number(avg[m].human.toFixed(1)),
      social: Number(avg[m].social.toFixed(1)),
    };
  });

  return { weights: w, capitals: finalCaps, shares: rounded };
}

function pad(num, width = 5) {
  const s = String(num);
  return s.length >= width ? s : s + ' '.repeat(width - s.length);
}
function bar(pct) {
  const total = 10;
  const filled = Math.round((pct / 100) * total);
  const empty = Math.max(0, total - filled);
  return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
}

setInterval(async () => {
  try {
    const rooms = await Room.find({});
    for (const room of rooms) {
      if (!room || !Array.isArray(room.answers)) continue;
      if (room.answers.length !== room.maxMembers) continue;
      if (room.resultSent) continue; // —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞

      // –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
      const marked = await Room.findOneAndUpdate(
        { _id: room._id, $or: [ { resultSent: { $exists: false } }, { resultSent: false } ] },
        { $set: { resultSent: true } },
        { new: true }
      );
      if (!marked) continue; // –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª

      const { weights, capitals, shares } = computeRoomResult(marked);

      // –ö—Ä–∞—Å–∏–≤–æ–µ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–æ–ª–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
      const sortedShares = [...shares].sort((a, b) => b.share - a.share);

      let message = '';
      message += '<b>üìä –ò—Ç–æ–≥ –ø–æ —Ç–µ—Å—Ç—É ¬´–¢—Ä–∏ –∫–∞–ø–∏—Ç–∞–ª–∞¬ª</b>\n\n';
      message += '<i>–§–æ—Ä–º—É–ª–∞:</i> Share(i) = (1/100) √ó Œ£ [w_k √ó p_k(i)]\n';
      message += `<b>–í–µ—Å–∞:</b> –≠–∫–æ–Ω ${weights.econ.toFixed(1)}% ¬∑ –ß–µ–ª ${weights.human.toFixed(1)}% ¬∑ –°–æ—Ü ${weights.social.toFixed(1)}%\n\n`;

      message += '<b>–°—Ä–µ–¥–Ω–∏–µ –¥–æ–ª–∏ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∞–º</b>\n';
      for (const m of marked.members) {
        const c = capitals[m];
        message += `‚Ä¢ <b>${m}</b>\n`;
        message += `<code>–≠–∫–æ–Ω ${pad(c.econ.toFixed(1))}%  ${bar(c.econ)}</code>\n`;
        message += `<code>–ß–µ–ª  ${pad(c.human.toFixed(1))}%  ${bar(c.human)}</code>\n`;
        message += `<code>–°–æ—Ü  ${pad(c.social.toFixed(1))}%  ${bar(c.social)}</code>\n\n`;
      }

      message += '<b>–ò—Ç–æ–≥–æ–≤—ã–µ –¥–æ–ª–∏</b>\n';
      for (const s of sortedShares) {
        message += `‚Ä¢ <b>${s.name}</b>: <b>${s.share}%</b>\n`;
      }

      // –†–∞—Å—Å—ã–ª–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (HTML)
      for (const ans of marked.answers) {
        const user = await User.findOne({ telegramId: ans.id });
        if (user) {
          await bot.sendMessage(user.telegramId, message, { parse_mode: 'HTML' });
        }
      }

      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–∞ –≤ –ë–î
      try {
        await Room.deleteOne({ _id: marked._id });
      } catch (delErr) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', delErr);
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–Ω–∞—Ç:', err);
  }
}, 10000);
